# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Course {
  id: ID!
  title: String
  description: Course_description_Document
  problemSets(where: ProblemSetWhereInput! = {}, orderBy: [ProblemSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProblemSetWhereUniqueInput): [ProblemSet!]
  problemSetsCount(where: ProblemSetWhereInput! = {}): Int
  episodes(where: EpisodeWhereInput! = {}, orderBy: [EpisodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EpisodeWhereUniqueInput): [Episode!]
  episodesCount(where: EpisodeWhereInput! = {}): Int
}

type Course_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  problemSets: ProblemSetManyRelationFilter
  episodes: EpisodeManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProblemSetManyRelationFilter {
  every: ProblemSetWhereInput
  some: ProblemSetWhereInput
  none: ProblemSetWhereInput
}

input EpisodeManyRelationFilter {
  every: EpisodeWhereInput
  some: EpisodeWhereInput
  none: EpisodeWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CourseUpdateInput {
  title: String
  description: JSON
  problemSets: ProblemSetRelateToManyForUpdateInput
  episodes: EpisodeRelateToManyForUpdateInput
}

input ProblemSetRelateToManyForUpdateInput {
  disconnect: [ProblemSetWhereUniqueInput!]
  set: [ProblemSetWhereUniqueInput!]
  create: [ProblemSetCreateInput!]
  connect: [ProblemSetWhereUniqueInput!]
}

input EpisodeRelateToManyForUpdateInput {
  disconnect: [EpisodeWhereUniqueInput!]
  set: [EpisodeWhereUniqueInput!]
  create: [EpisodeCreateInput!]
  connect: [EpisodeWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  description: JSON
  problemSets: ProblemSetRelateToManyForCreateInput
  episodes: EpisodeRelateToManyForCreateInput
}

input ProblemSetRelateToManyForCreateInput {
  create: [ProblemSetCreateInput!]
  connect: [ProblemSetWhereUniqueInput!]
}

input EpisodeRelateToManyForCreateInput {
  create: [EpisodeCreateInput!]
  connect: [EpisodeWhereUniqueInput!]
}

type Download {
  id: ID!
  title: String
  lastUpdated: DateTime
  fileDownload: FileFieldOutput
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input DownloadWhereUniqueInput {
  id: ID
}

input DownloadWhereInput {
  AND: [DownloadWhereInput!]
  OR: [DownloadWhereInput!]
  NOT: [DownloadWhereInput!]
  id: IDFilter
  title: StringFilter
  lastUpdated: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input DownloadOrderByInput {
  id: OrderDirection
  title: OrderDirection
  lastUpdated: OrderDirection
}

input DownloadUpdateInput {
  title: String
  lastUpdated: DateTime
  fileDownload: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DownloadUpdateArgs {
  where: DownloadWhereUniqueInput!
  data: DownloadUpdateInput!
}

input DownloadCreateInput {
  title: String
  lastUpdated: DateTime
  fileDownload: FileFieldInput
}

type Episode {
  id: ID!
  title: String
  description: Episode_description_Document
  episodeNumber: Float
  category: String
  runtime: String
  youtubeVideoId: String
  publishedAt: DateTime
  status: String
  relatedEpisodes(where: EpisodeWhereInput! = {}, orderBy: [EpisodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EpisodeWhereUniqueInput): [Episode!]
  relatedEpisodesCount(where: EpisodeWhereInput! = {}): Int
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
  problemSets(where: ProblemSetWhereInput! = {}, orderBy: [ProblemSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProblemSetWhereUniqueInput): [ProblemSet!]
  problemSetsCount(where: ProblemSetWhereInput! = {}): Int
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

type Episode_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EpisodeWhereUniqueInput {
  id: ID
  episodeNumber: Float
}

input EpisodeWhereInput {
  AND: [EpisodeWhereInput!]
  OR: [EpisodeWhereInput!]
  NOT: [EpisodeWhereInput!]
  id: IDFilter
  title: StringFilter
  episodeNumber: FloatFilter
  category: StringFilter
  runtime: StringFilter
  youtubeVideoId: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringFilter
  relatedEpisodes: EpisodeManyRelationFilter
  keywords: KeywordManyRelationFilter
  problemSets: ProblemSetManyRelationFilter
  courses: CourseManyRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input KeywordManyRelationFilter {
  every: KeywordWhereInput
  some: KeywordWhereInput
  none: KeywordWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input EpisodeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  episodeNumber: OrderDirection
  category: OrderDirection
  runtime: OrderDirection
  youtubeVideoId: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input EpisodeUpdateInput {
  title: String
  description: JSON
  episodeNumber: Float
  category: String
  runtime: String
  youtubeVideoId: String
  publishedAt: DateTime
  status: String
  relatedEpisodes: EpisodeRelateToManyForUpdateInput
  keywords: KeywordRelateToManyForUpdateInput
  problemSets: ProblemSetRelateToManyForUpdateInput
  courses: CourseRelateToManyForUpdateInput
}

input KeywordRelateToManyForUpdateInput {
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input EpisodeUpdateArgs {
  where: EpisodeWhereUniqueInput!
  data: EpisodeUpdateInput!
}

input EpisodeCreateInput {
  title: String
  description: JSON
  episodeNumber: Float
  category: String
  runtime: String
  youtubeVideoId: String
  publishedAt: DateTime
  status: String
  relatedEpisodes: EpisodeRelateToManyForCreateInput
  keywords: KeywordRelateToManyForCreateInput
  problemSets: ProblemSetRelateToManyForCreateInput
  courses: CourseRelateToManyForCreateInput
}

input KeywordRelateToManyForCreateInput {
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type Keyword {
  id: ID!
  name: String
  episodes(where: EpisodeWhereInput! = {}, orderBy: [EpisodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EpisodeWhereUniqueInput): [Episode!]
  episodesCount(where: EpisodeWhereInput! = {}): Int
}

input KeywordWhereUniqueInput {
  id: ID
}

input KeywordWhereInput {
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
  id: IDFilter
  name: StringFilter
  episodes: EpisodeManyRelationFilter
}

input KeywordOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input KeywordUpdateInput {
  name: String
  episodes: EpisodeRelateToManyForUpdateInput
}

input KeywordUpdateArgs {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateInput!
}

input KeywordCreateInput {
  name: String
  episodes: EpisodeRelateToManyForCreateInput
}

type Poster {
  id: ID!
  title: String
  attribution: String
  image: ImageFieldOutput
  file: FileFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PosterWhereUniqueInput {
  id: ID
}

input PosterWhereInput {
  AND: [PosterWhereInput!]
  OR: [PosterWhereInput!]
  NOT: [PosterWhereInput!]
  id: IDFilter
  title: StringFilter
  attribution: StringFilter
}

input PosterOrderByInput {
  id: OrderDirection
  title: OrderDirection
  attribution: OrderDirection
}

input PosterUpdateInput {
  title: String
  attribution: String
  image: ImageFieldInput
  file: FileFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

input PosterUpdateArgs {
  where: PosterWhereUniqueInput!
  data: PosterUpdateInput!
}

input PosterCreateInput {
  title: String
  attribution: String
  image: ImageFieldInput
  file: FileFieldInput
}

type ProblemSet {
  id: ID!
  title: String
  problemSetFile: FileFieldOutput
  solutionFile: FileFieldOutput
  downloadCount: Int
  episode: Episode
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

input ProblemSetWhereUniqueInput {
  id: ID
}

input ProblemSetWhereInput {
  AND: [ProblemSetWhereInput!]
  OR: [ProblemSetWhereInput!]
  NOT: [ProblemSetWhereInput!]
  id: IDFilter
  title: StringFilter
  downloadCount: IntNullableFilter
  episode: EpisodeWhereInput
  courses: CourseManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProblemSetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  downloadCount: OrderDirection
}

input ProblemSetUpdateInput {
  title: String
  problemSetFile: FileFieldInput
  solutionFile: FileFieldInput
  downloadCount: Int
  episode: EpisodeRelateToOneForUpdateInput
  courses: CourseRelateToManyForUpdateInput
}

input EpisodeRelateToOneForUpdateInput {
  create: EpisodeCreateInput
  connect: EpisodeWhereUniqueInput
  disconnect: Boolean
}

input ProblemSetUpdateArgs {
  where: ProblemSetWhereUniqueInput!
  data: ProblemSetUpdateInput!
}

input ProblemSetCreateInput {
  title: String
  problemSetFile: FileFieldInput
  solutionFile: FileFieldInput
  downloadCount: Int
  episode: EpisodeRelateToOneForCreateInput
  courses: CourseRelateToManyForCreateInput
}

input EpisodeRelateToOneForCreateInput {
  create: EpisodeCreateInput
  connect: EpisodeWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  status: String
  createdAt: DateTime
  lastLoginDate: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  status: String
  createdAt: DateTime
  lastLoginDate: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  status: String
  createdAt: DateTime
  lastLoginDate: DateTime
}

type AboutUsSection {
  id: ID!
  aboutUs: String
  ourMission: String
}

input AboutUsSectionWhereUniqueInput {
  id: ID
}

input AboutUsSectionWhereInput {
  AND: [AboutUsSectionWhereInput!]
  OR: [AboutUsSectionWhereInput!]
  NOT: [AboutUsSectionWhereInput!]
  id: IDFilter
  aboutUs: StringFilter
  ourMission: StringFilter
}

input AboutUsSectionOrderByInput {
  id: OrderDirection
  aboutUs: OrderDirection
  ourMission: OrderDirection
}

input AboutUsSectionUpdateInput {
  aboutUs: String
  ourMission: String
}

input AboutUsSectionUpdateArgs {
  where: AboutUsSectionWhereUniqueInput! = {id: 1}
  data: AboutUsSectionUpdateInput!
}

input AboutUsSectionCreateInput {
  aboutUs: String
  ourMission: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createDownload(data: DownloadCreateInput!): Download
  createDownloads(data: [DownloadCreateInput!]!): [Download]
  updateDownload(where: DownloadWhereUniqueInput!, data: DownloadUpdateInput!): Download
  updateDownloads(data: [DownloadUpdateArgs!]!): [Download]
  deleteDownload(where: DownloadWhereUniqueInput!): Download
  deleteDownloads(where: [DownloadWhereUniqueInput!]!): [Download]
  createEpisode(data: EpisodeCreateInput!): Episode
  createEpisodes(data: [EpisodeCreateInput!]!): [Episode]
  updateEpisode(where: EpisodeWhereUniqueInput!, data: EpisodeUpdateInput!): Episode
  updateEpisodes(data: [EpisodeUpdateArgs!]!): [Episode]
  deleteEpisode(where: EpisodeWhereUniqueInput!): Episode
  deleteEpisodes(where: [EpisodeWhereUniqueInput!]!): [Episode]
  createKeyword(data: KeywordCreateInput!): Keyword
  createKeywords(data: [KeywordCreateInput!]!): [Keyword]
  updateKeyword(where: KeywordWhereUniqueInput!, data: KeywordUpdateInput!): Keyword
  updateKeywords(data: [KeywordUpdateArgs!]!): [Keyword]
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteKeywords(where: [KeywordWhereUniqueInput!]!): [Keyword]
  createPoster(data: PosterCreateInput!): Poster
  createPosters(data: [PosterCreateInput!]!): [Poster]
  updatePoster(where: PosterWhereUniqueInput!, data: PosterUpdateInput!): Poster
  updatePosters(data: [PosterUpdateArgs!]!): [Poster]
  deletePoster(where: PosterWhereUniqueInput!): Poster
  deletePosters(where: [PosterWhereUniqueInput!]!): [Poster]
  createProblemSet(data: ProblemSetCreateInput!): ProblemSet
  createProblemSets(data: [ProblemSetCreateInput!]!): [ProblemSet]
  updateProblemSet(where: ProblemSetWhereUniqueInput!, data: ProblemSetUpdateInput!): ProblemSet
  updateProblemSets(data: [ProblemSetUpdateArgs!]!): [ProblemSet]
  deleteProblemSet(where: ProblemSetWhereUniqueInput!): ProblemSet
  deleteProblemSets(where: [ProblemSetWhereUniqueInput!]!): [ProblemSet]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAboutUsSection(data: AboutUsSectionCreateInput!): AboutUsSection
  createAboutUsSections(data: [AboutUsSectionCreateInput!]!): [AboutUsSection]
  updateAboutUsSection(where: AboutUsSectionWhereUniqueInput! = {id: 1}, data: AboutUsSectionUpdateInput!): AboutUsSection
  updateAboutUsSections(data: [AboutUsSectionUpdateArgs!]!): [AboutUsSection]
  deleteAboutUsSection(where: AboutUsSectionWhereUniqueInput! = {id: 1}): AboutUsSection
  deleteAboutUsSections(where: [AboutUsSectionWhereUniqueInput!]!): [AboutUsSection]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  downloads(where: DownloadWhereInput! = {}, orderBy: [DownloadOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DownloadWhereUniqueInput): [Download!]
  download(where: DownloadWhereUniqueInput!): Download
  downloadsCount(where: DownloadWhereInput! = {}): Int
  episodes(where: EpisodeWhereInput! = {}, orderBy: [EpisodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EpisodeWhereUniqueInput): [Episode!]
  episode(where: EpisodeWhereUniqueInput!): Episode
  episodesCount(where: EpisodeWhereInput! = {}): Int
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywordsCount(where: KeywordWhereInput! = {}): Int
  posters(where: PosterWhereInput! = {}, orderBy: [PosterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PosterWhereUniqueInput): [Poster!]
  poster(where: PosterWhereUniqueInput!): Poster
  postersCount(where: PosterWhereInput! = {}): Int
  problemSets(where: ProblemSetWhereInput! = {}, orderBy: [ProblemSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProblemSetWhereUniqueInput): [ProblemSet!]
  problemSet(where: ProblemSetWhereUniqueInput!): ProblemSet
  problemSetsCount(where: ProblemSetWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  aboutUsSections(where: AboutUsSectionWhereInput! = {id: {equals: 1}}, orderBy: [AboutUsSectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutUsSectionWhereUniqueInput): [AboutUsSection!]
  aboutUsSection(where: AboutUsSectionWhereUniqueInput! = {id: 1}): AboutUsSection
  aboutUsSectionsCount(where: AboutUsSectionWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
