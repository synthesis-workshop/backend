# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  status: String
  createdAt: DateTime
  lastLoginDate: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  status: String
  createdAt: DateTime
  lastLoginDate: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  status: String
  createdAt: DateTime
  lastLoginDate: DateTime
}

type Course {
  id: ID!
  title: String
  body: String
  problemSet(
    where: ProblemSetWhereInput! = {}
    orderBy: [ProblemSetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ProblemSetWhereUniqueInput
  ): [ProblemSet!]
  problemSetCount(where: ProblemSetWhereInput! = {}): Int
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  body: StringFilter
  problemSet: ProblemSetManyRelationFilter
}

input ProblemSetManyRelationFilter {
  every: ProblemSetWhereInput
  some: ProblemSetWhereInput
  none: ProblemSetWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  body: OrderDirection
}

input CourseUpdateInput {
  title: String
  body: String
  problemSet: ProblemSetRelateToManyForUpdateInput
}

input ProblemSetRelateToManyForUpdateInput {
  disconnect: [ProblemSetWhereUniqueInput!]
  set: [ProblemSetWhereUniqueInput!]
  create: [ProblemSetCreateInput!]
  connect: [ProblemSetWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  body: String
  problemSet: ProblemSetRelateToManyForCreateInput
}

input ProblemSetRelateToManyForCreateInput {
  create: [ProblemSetCreateInput!]
  connect: [ProblemSetWhereUniqueInput!]
}

type ProblemSet {
  id: ID!
  title: String
  problemSetFile: FileFieldOutput
  solutionFile: FileFieldOutput
  episodeLink: String
  downloadCount: Int
  course(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: CourseWhereUniqueInput
  ): [Course!]
  courseCount(where: CourseWhereInput! = {}): Int
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input ProblemSetWhereUniqueInput {
  id: ID
}

input ProblemSetWhereInput {
  AND: [ProblemSetWhereInput!]
  OR: [ProblemSetWhereInput!]
  NOT: [ProblemSetWhereInput!]
  id: IDFilter
  title: StringFilter
  episodeLink: StringFilter
  downloadCount: IntNullableFilter
  course: CourseManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input ProblemSetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  episodeLink: OrderDirection
  downloadCount: OrderDirection
}

input ProblemSetUpdateInput {
  title: String
  problemSetFile: FileFieldInput
  solutionFile: FileFieldInput
  episodeLink: String
  downloadCount: Int
  course: CourseRelateToManyForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input ProblemSetUpdateArgs {
  where: ProblemSetWhereUniqueInput!
  data: ProblemSetUpdateInput!
}

input ProblemSetCreateInput {
  title: String
  problemSetFile: FileFieldInput
  solutionFile: FileFieldInput
  episodeLink: String
  downloadCount: Int
  course: CourseRelateToManyForCreateInput
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createProblemSet(data: ProblemSetCreateInput!): ProblemSet
  createProblemSets(data: [ProblemSetCreateInput!]!): [ProblemSet]
  updateProblemSet(
    where: ProblemSetWhereUniqueInput!
    data: ProblemSetUpdateInput!
  ): ProblemSet
  updateProblemSets(data: [ProblemSetUpdateArgs!]!): [ProblemSet]
  deleteProblemSet(where: ProblemSetWhereUniqueInput!): ProblemSet
  deleteProblemSets(where: [ProblemSetWhereUniqueInput!]!): [ProblemSet]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserWhereUniqueInput
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: CourseWhereUniqueInput
  ): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  problemSets(
    where: ProblemSetWhereInput! = {}
    orderBy: [ProblemSetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ProblemSetWhereUniqueInput
  ): [ProblemSet!]
  problemSet(where: ProblemSetWhereUniqueInput!): ProblemSet
  problemSetsCount(where: ProblemSetWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
